# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Downloading Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Downloading Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
runApp(tmp.R)
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
isTRUE(T
)
isTRUE(1)
isTRUE(0)
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
library(shiny)
runExample("10_download")
library(shiny)
shiny::runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
a <- c(1,2)
a
write(10, a)
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
a <- matrix(0, 3,3)
a
zip("hoge.zip", a)
write(10, "hoge")
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
a <- c()
a <- append(a, "a")
a
a <- c(NULL)
a
append(a, "a")
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
shiny::runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
runApp('~/OkazakiLab/Experiment/src/alignment_app')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
source("verification/methods/MakePairwise.R")
library(foreach)
library(doParallel)
registerDoParallel(detectCores())
# get the all of files path
filesPath <- GetPathList()
# matchingrate path
ansrate.file <- "../../Alignment/ansrate_levenshtein.txt"
# result path
output.dir <- paste("../../Alignment/pairwise_levenshtein_", format(Sys.Date()), "/", sep = "")
if (!dir.exists(output.dir)) {
dir.create(output.dir)
}
# make scoring matrix
s <- MakeEditDistance(Inf)
# conduct the alignment for each files
foreach.rlt <- foreach (f = filesPath) %dopar% {
# make the word list
gold.list <- MakeWordList(f["input"])
word.list <- MakeInputSeq(gold.list)
# making the gold standard alignments
gold.aln <- MakeGoldStandard(gold.list)
# making the pairwise alignment in all regions
psa.aln <- MakePairwise(word.list, s, fmin = T)
# calculating the matching rate
matching.rate <- VerifAcc(gold.aln, psa.aln)
# output gold standard
OutputAlignment(f["name"], output.dir, ".lg", gold.aln)
# output pairwise
OutputAlignment(f["name"], output.dir, ".aln", psa.aln)
# output match or mismatch
OutputAlignmentCheck(f["name"], output.dir, ".check", psa.aln, gold.aln)
# output the matching rate
sink(ansrate.file, append = T)
rlt <- paste(f["name"], matching.rate, sep = " ")
print(rlt, quote = F)
sink()
}
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
source("verification/methods/MakePairwise.R")
library(foreach)
library(doParallel)
registerDoParallel(detectCores())
# get the all of files path
filesPath <- GetPathList()
# matchingrate path
ansrate.file <- "../../Alignment/ansrate_levenshtein.txt"
word.list
w <- MakeWordList("../../Alignment/input_csv/01-003é¦–(2-2).csv")
LevenShtein <- function(word.list, s) {
# making the pairwise alignment in all regions
psa.aln <- MakePairwise(word.list, s, select.min = T)
return(psa.aln)
}
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
source("verification/methods/MakePairwise.R")
LevenShtein <- function(word.list, s) {
# making the pairwise alignment in all regions
psa.aln <- MakePairwise(word.list, s, select.min = T)
return(psa.aln)
}
s
s <- MakeEditDistance(Inf)
s
MakeEditDistance()
MakeEditDistance
MakeEditDistance <- function(s5 = NA)
{
dir <- getwd()
cSymFile <- paste(dir, "lib/data/symbols/consonants", sep = "/")
vSymFile <- "lib/data/symbols/vowels"
cValFile <- "lib/data/features/consonants_values"
vValFile <- "lib/data/features/vowels_values"
######
# make consonant array
consonant <- as.matrix(read.table(cSymFile))
consonant_length <- length(consonant)
# make vowel array
vowel <- as.matrix(read.table(vSymFile))
vowel_length <- length(vowel)
# get the sum of length of consonant and vowel
score_row <- score_col <- consonant_length + vowel_length + 1
symbols <- c(consonant, vowel, "-")
# assign s5 scores
feature_matrix <- matrix(s5, nrow = score_row, ncol = score_col,
dimnames = list(symbols, symbols))
# assign gap penalty
feature_matrix["-", ] <- 1
feature_matrix[, "-"] <- 1
feature_matrix["-", "-"] <- 0
if (0) {
# consonant feature
c_feature <- read.table(cValFile)
k <- dim(c_feature)[[1]]
l <- dim(c_feature)[[2]]
c <- matrix(NA, k, l, dimnames = list(consonant, c()))
for (i in 1:l) {
c[, i] <- c_feature[, i]
}
c_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (c[i, n] == c[j, n])
match <- match + 1
}
c_match[i, j] <- match
}
}
# vowel feature
v_feature <- read.table(vValFile)
k <- dim(v_feature)[[1]]
l <- dim(v_feature)[[2]]
v <- matrix(NA, k, l)
for (i in 1:l) {
v[, i] <- v_feature[, i]
}
v_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (v[i, n] == v[j, n])
match <- match + 1
}
v_match[i, j] <- match
}
}
}
###
# feature_matrix[1:81, 1:81] <- c_match
feature_matrix[1:81, 1:81] <- 1
# feature_matrix[82:118, 82:118] <- v_match
feature_matrix[82:118, 82:118] <- 1
diag(feature_matrix) <- 0
return(feature_matrix)
}
MakeEditDistance(Inf)
MakeEditDistance <- function(s5 = NA)
{
dir <- getwd()
cSymFile <- paste(dir, "lib/data/symbols/consonants", sep = "/")
vSymFile <- "lib/data/symbols/vowels"
cValFile <- "lib/data/features/consonants_values"
vValFile <- "lib/data/features/vowels_values"
######
# make consonant array
consonant <- as.matrix(read.table(cSymFile))
consonant_length <- length(consonant)
# make vowel array
vowel <- as.matrix(read.table(vSymFile))
vowel_length <- length(vowel)
# get the sum of length of consonant and vowel
score_row <- score_col <- consonant_length + vowel_length + 1
symbols <- c(consonant, vowel, "-")
# assign s5 scores
feature_matrix <- matrix(s5, nrow = score_row, ncol = score_col,
dimnames = list(symbols, symbols))
# assign gap penalty
feature_matrix["-", ] <- 1
feature_matrix[, "-"] <- 1
feature_matrix["-", "-"] <- 0
if (0) {
# consonant feature
c_feature <- read.table(cValFile)
k <- dim(c_feature)[[1]]
l <- dim(c_feature)[[2]]
c <- matrix(NA, k, l, dimnames = list(consonant, c()))
for (i in 1:l) {
c[, i] <- c_feature[, i]
}
c_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (c[i, n] == c[j, n])
match <- match + 1
}
c_match[i, j] <- match
}
}
# vowel feature
v_feature <- read.table(vValFile)
k <- dim(v_feature)[[1]]
l <- dim(v_feature)[[2]]
v <- matrix(NA, k, l)
for (i in 1:l) {
v[, i] <- v_feature[, i]
}
v_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (v[i, n] == v[j, n])
match <- match + 1
}
v_match[i, j] <- match
}
}
}
###
# feature_matrix[1:81, 1:81] <- c_match
feature_matrix[1:81, 1:81] <- 1
# feature_matrix[82:118, 82:118] <- v_match
feature_matrix[82:118, 82:118] <- 1
diag(feature_matrix) <- 0
return(feature_matrix)
}
MakeEditDistance(Inf)
s
s <- MakeEditDistance(Inf)
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
source("verification/methods/MakePairwise.R")
LevenShtein <- function(word.list, s) {
# making the pairwise alignment in all regions
psa.aln <- MakePairwise(word.list, s, select.min = T)
return(psa.aln)
}
LevenShtein(wword.list, s)
LevenShtein(word.list, s)
word.list
LevenShtein(w, s)
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
source("verification/methods/MakePairwise.R")
Levenshtein <- function(word.list) {
# making the pairwise alignment in all regions
s <- MakeEditDistance(Inf)
psa.aln <- MakePairwise(word.list, s, select.min = T)
return(psa.aln)
}
Levenshtein(word.list)
word.list
Levenshtein(w)
w
MakeEditDistance(Inf)
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
MakeD
MakeEditDistance(Inf)
MakeEditDistance <- function(s5 = NA)
{
dir <- getwd()
cSymFile <- paste(dir, "lib/data/symbols/consonants", sep = "/")
vSymFile <- "lib/data/symbols/vowels"
cValFile <- "lib/data/features/consonants_values"
vValFile <- "lib/data/features/vowels_values"
######
# make consonant array
consonant <- as.matrix(read.table(cSymFile))
consonant_length <- length(consonant)
# make vowel array
vowel <- as.matrix(read.table(vSymFile))
vowel_length <- length(vowel)
# get the sum of length of consonant and vowel
score_row <- score_col <- consonant_length + vowel_length + 1
symbols <- c(consonant, vowel, "-")
# assign s5 scores
feature_matrix <- matrix(s5, nrow = score_row, ncol = score_col,
dimnames = list(symbols, symbols))
# assign gap penalty
feature_matrix["-", ] <- 1
feature_matrix[, "-"] <- 1
feature_matrix["-", "-"] <- 0
if (0) {
# consonant feature
c_feature <- read.table(cValFile)
k <- dim(c_feature)[[1]]
l <- dim(c_feature)[[2]]
c <- matrix(NA, k, l, dimnames = list(consonant, c()))
for (i in 1:l) {
c[, i] <- c_feature[, i]
}
c_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (c[i, n] == c[j, n])
match <- match + 1
}
c_match[i, j] <- match
}
}
# vowel feature
v_feature <- read.table(vValFile)
k <- dim(v_feature)[[1]]
l <- dim(v_feature)[[2]]
v <- matrix(NA, k, l)
for (i in 1:l) {
v[, i] <- v_feature[, i]
}
v_match <- matrix(NA, k, k)
for (i in 1:k) {
for (j in 1:k) {
match <- 0
for (n in 1:5) {
if (v[i, n] == v[j, n])
match <- match + 1
}
v_match[i, j] <- match
}
}
}
###
# feature_matrix[1:81, 1:81] <- c_match
feature_matrix[1:81, 1:81] <- 1
# feature_matrix[82:118, 82:118] <- v_match
feature_matrix[82:118, 82:118] <- 1
diag(feature_matrix) <- 0
return(feature_matrix)
}
MakeEditDistance(Inf)
source("lib/load_data_processing.R")
source("lib/load_verif_lib.R")
source("lib/load_scoring_matrix.R")
MakeEditDistance(Inf)
source("lib/load_scoring_matrix.R")
MakeEditDistance(Inf)
MakeEditDistance
source("lib/load_scoring_matrix.R")
MakeEditDistance
source("lib/load_scoring_matrix.R")
MakeEditDistance
source("lib/load_scoring_matrix.R")
MakeEditDistance
source("lib/load_scoring_matrix.R")
MakeEditDistance
source("lib/load_scoring_matrix.R")
MakeEditDistance
source("lib/scoring_matrix/MakeEditDistance.R")
MakeEditDistance
source("lib/scoring_matrix/MakeEditDistance.R")
source("lib/scoring_matrix/MakeEditDistance.R")
MakeEditDistance
source("lib/scoring_matrix/MakeEditDistance.R")
MakeEditDistance
